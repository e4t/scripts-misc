#! /bin/bash
#set -x
get_version() {
    local sha1=$1 version
    local anytag=$2
    if $anytag; then
	anytag=--tags
    else
	unset anytag
    fi
    version=$(git describe $anytag $sha1 2>/dev/null) || return 1
    echo $version | sed -e "s/-/./g" -e  "s/-/_/g" -e "s/^v//"
}

create_archive() {
    local package=$1 version=$2 sha1=$3 target=$4 compression=$5

    git archive --format=tar --prefix=$package-$version/ \
	-o $target/$package-$version.tar $sha1
    case $compression in
	bz2) bzip2 $target/$package-$version.tar ;;
	gz) gzip $target/$package-$version.tar ;;
	xz) xz $target/$package-$version.tar ;;
	Z) compress $target/$package-$version.tar ;;
	*) echo "Unknown compression" ;;
    esac
}

usage() {
    echo "$(basename $0) [-a][-v][-c <compression>][-r <sha1>][-p package] targetdir"
    echo "Options:"
    echo -e "\t-a: use any tag, not just annotated ones"
    echo -e "\t-v: verbose - print package & version"
    echo -e "\t-c <compression> set archive compression. Default: bz2"
    echo -e "\t-r <sha1> set version id. Default: HEAD"
    echo -e "\t-p package: name of package. Default: name of git directory"
    echo -e "\t-V version: package version to put in tarball and directory names"
    echo -e "\t            Default: format of 'git describe'"
    echo -e "\ttargetdir: directory to put archive"
}

die() {
    local msg=$1
    echo -e "$msg" >&2
    exit 1
}

compression=bz2
sha1=HEAD
verbose=false
anytag=false

while [ -n "$1" ]
do
    case $1 in
	-v) verbose=true; shift ;;
	-c) shift; compression=$1; shift ;;
	-r) shift; sha1=$1; shift ;;
	-p) shift; package=$1; shift ;;
	-V) shift; version=$1; shift ;;
	-a) shift; anytag=true ;;
	-*) usage; exit 0;;
	*)
	    if [ -z "$target" ]
	    then
		target=$1;
	    else
		usage; exit 1;
	    fi
	    shift ;;
    esac
done
[ -z "$package" ] && package=$(basename $(git rev-parse --show-toplevel)) || die "Not git repo"
[ -z "$target" ] && { usage; exit 1; }
[ -z "$version" ] && { version=$(get_version $sha1 $anytag) || die "sha1 $sha1 doesn't exist"; }
create_archive $package $version $sha1 $target $compression || die "Cannot create archive"

$verbose && echo $package-$version.tar.$compression

exit 0
