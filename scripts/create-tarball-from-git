#! /bin/bash
#set -x

VERBOSE=0

die () {
    case $1 in
     -n)
        echo -e "$1" >&2
	;;
     *) shift
        echo -e "$1" >&2
	usage >&2
	;;
    esac
    exit 1
}

usage () {
cat<<EOF
     $(basename $0) [-v <version>] [-d <outdir>] [-c <compression>] | [-h]
     Creaqte a tarball from HEAD or a given version of a git repo.
     Options:
          -e <pattern>: exclude glob(7) pattern when searching for tag
          -m <pattern>: match glob(7) pattern when searching for tag
          -v <version>: git version to use. default: HEAD
          -d <outdir>:  directory to place file. default: $pwd
          -c <compression>: comression to use. Vaild are:
                            gz, Z, bz2, xz, lzma, zip. default: bz2.
EOF
}

compression=bz2
outdir=.
version=HEAD
package=$(basename $(git rev-parse --show-toplevel))

while [ -n "$1" ]
do
    case $1 in
	-m) shift; desc_a="${des_a:+$des_a }--match \'$1\,"; shift;;
	-e) shift; desc_a="${des_a:+$des_a }--exclude \'$1\'"; shift;;
	-v) shift; version=$1; shift ;;
	-d) shift; outdir=$1; shift ;;
	-c) shift; compression=$1; shift ;;
	-h) usage; exit 0 ;;
	*) die "Wrong argument $1" ;;
    esac
done

# get rid of leading characters - make sure we start with a number
versionstring=$(git describe $des_a $version 2>/dev/null | sed -e "s/^[^0-9]*//")
# only if a sha1 is given
if [[ $versionstring =~ -g[a-f0-9]+ ]]
then
    sha1=$( echo $versionstring | sed -e "s/.*-g//" )
    versionstring=$( echo $versionstring | sed -e "s/\(.*\)-g.*/\\1/" )
    dist=$( echo $versionstring | sed -e "s/.*-//" )
    versionstring=$( echo $versionstring |  sed -e "s/\(.*\)-.*/\\1/")
fi
# attempt to remove any alpha, beta, rc, ...
versionstring=$( echo $versionstring |
		    sed -e "s/[-A-Za-z]\+//" -e "s/\.\././" )${dist:+.${dist}}${sha1:++git${sha1}}

[ -n "$versionstring" ] || die "$version not a git version"
[ -n "$outdir" -a -d "$outdir" ] || die "\"$dir\" not a valid output directory"
case $compression in
    gz|Z|bz2|xz|lzma|zip) ;;
    *) die "\"$compression\" invalid compression type" ;;
esac

git archive --format=tar --prefix=$package-$versionstring/ \
    -o $outdir/$package-$versionstring.tar $version

case $compression in
    bz2) bzip2 $outdir/$package-$versionstring.tar ;;
    gz) gzip $outdir/$package-$versionstring.tar ;;
    xz) xz $outdir/$package-$versionstring.tar ;;
    Z) compress $outdir/$package-$versionstring.tar ;;
    *) echo "Unknown compression" ;;
esac
