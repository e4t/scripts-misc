
scripts-misc
============

This project contains a collection of scripts which I have developed
over the years to simplify common and recurring tasks and to make my 
life easier.


Environment
-----------

Some scripts require environment variables to be set up to provide
personal data and adjust to the local setup. Common settings will
be listed in this section. 
Script specific settings will be listed in the respective sections.

Scripts will source $HOME/.myconfig to set the personal preferences.
To be able to share this file between different machines, it should
source a machine specific config.
The following environment variables are recognized from $HOME/.myconfig:

TMPDIR=  # /var/tmp
# company email address
MY_COMPANY_EMAIL= # "me@suse.com"
# email address preferred for software projects
MY_EMAIL= # "me@myfavoriteproject.org"
test -e ${HOME}/.mylocalconfig && . ${HOME}/.mylocalconfig
test -e ${HOME}/.mymachine-${HOSTNAME} && . ${HOME}/.mymachine-${HOSTNAME}

$HOME/.mymachine-* should contain:

BUILDENVHOME=/space/bev
BUILDEXTRADIRS="/space /space1"
SUSEKERNEL=/space/suse_kernel/kernel-source
CHECKPATCH=/space/kernel/linux-2.6/scripts/checkpatch.pl
SPACEDIR=/space

Help
----

Each script comes with a help. It can be invoked with '-h'.

installkernel/removekernel
--------------------------
This script is based on a script I once got from Thomas Renninger.
Its origins may well be older. It is capable of installing a kernel
or individual modules on the local or a remote machine. It will also
update the boot loader accordingly.
Optionally it is able to strip the kernel and its modules. This is
useful to speed up the transfer and to reduce its foot print on the 
remote machine.
The script needs to be executed from the kernel source directory (ie.
where 'make' was executed).

Usage     installkernel [-o <builddir> ] [-a <arch>] [-l] [-f] [-i] [-n] [-s] [-j <n>] [hostname]
          installkernel [-i] [-a <arch>] [-s] -m "module_list" [hostname]
          removekernel [-l] [-n] [-f] [-i] [<version>] [hostname]

Options
   -n:  nomodule
   -a <arch>:  architecture(x86_64/i386)
   -o <build_dir>:  location of build files (O=... kernel option)
   -b:  edit bootloader configuration manually
   -f:  don't ask (doesn't update bootloader)
   -i:  don't update bootloader/initrd
   -m:  modules to install
   -j <n>: parallelize actions that can be parallelized
   -l:  use lilo
   -s:  strip kernel/modules

Description:
'installkernel' installs the entire kernel (optionally without modules) 
or individual modules. If no hostname is specified, it will install the
kernel on the local machine.
'-n' will install only the kernel image, not the modules.
'-m' will install the list of modules specified after the option. When
specifying more than one module, the list needs to appear in quotes.
'-o <build_dir>' will look for the kernel binaries on the directory 
specified. This is useful when building with the O=<build_dir> parameter.
'-i' will prevent the boot loader from being update. This will also prevent
the initrd from being built.
'-s' will cause the kernel image and the modules to be stripped.
'-a <arch>' if the kernel was built for a different architecture than the 
build host (for example i586 on x86_64) this option must be specified. 
Otherwise, 'make install' will attempt to recreate the kernel configuration.
'-j <n>' will parallelize the 'make install' process.
'-b' allows the user to edit the boot loader configuration manually.
'-f' runs the command in non-interactive mode, ie all user queries are
suppressed.
'-l' uses 'lilo' instead of 'grub' on x86_64 and i386 platforms.

'removekernel' does the opposite ie delete a specific kernel. If no 
version is specified it will remove the default kernel - ie the one
which 'vmlinux' or 'vmlinuz' links to.

git_show_suse.sh / git_show_xorg.sh
-----------------------------------
git_show_suse.sh is based on a script I once got from Thomas Renninger.
Create a list of patches in SUSE kernel or X11:XOrg project style. 
When executed in Linus' tree the upstream commit ID will be added. 
When executed from another cloned kernel repository the upstream URL 
and commit ID will be added. When the repository is local or the 
upsream URL contains 'suse' no repor or commit ID will be specified.
For X11:XOrg the patch state will be prepended to the name.

Usage:  git_show_suse.sh [-m N|n|u|U[<release_number>]|T] [-M "<mainline message>"] [-r "<reference string>"] [-d <directory>] [<range>]
	git_show_xorg.sh [-m N|n|u|U[<release_number>]|T] [-M "<mainline message>"] [-r "<reference string>"] [-d <directory>] [<range>]
 
Options:
  -m The following values are recognized:
     N: "Not applicable"
     n: "never"
     u: "To be upstreamed"
     U  "Upstream", an optional revision string may be specified
     Default: u
  -M <message> will replace the default message generated by the -m option with a 
     different string. This string will be printed in the Patch-mainline: preamble 
     line of the patch.
  -r <sting> an optional reference string. If none is specified the Reference: 
     line in the patch preamble will be left empty.
  -d <directory>: output to directory <directory> instead of the current one.
  -v verbose: print list of files.
  <range> a range of patches. This can either be a single commit or a range of 
     commits like HEAD^^..HEAD. Default is HEAD^..HEAD.

Description:
'-m' Allows to override the default state message 'u'. In the kernel case, the
script will attempt to determine if the patch is from a public repo and will
mark it accordingly.
'-M' will replace the default (according to the state set with '-m') state
string.
'-r' allows to add a 'Reference:' string. It should contain a bug and/or
FATE ID.
'-d' allows to specify a directory where the patches should be placed.
'-v' displays the list of patch files generated.
<range> allows to specify the list of patches. This can be either a list of
<id>, or <id1>..<id2>, ..<id2>, <id1>.. or a mixture thereof.

TODO:
An 'upstream' should be added for X11:XOrg flavored patches as well. The '-m'
option needs to be reconsidered reflecting recent changes in requirements for
the kernel.

rpm-git
-------
This scripts when executed from a directory containing an unpacked source
RPM and executes the %prep stage to unpack the sources in a subdirectory
'src/' and apply patches relevant patches. If the environment variable
BUILDENV is set, it take the specified path as the path to the buildroot
and tries to determine the architecture from BUILDENV. This way the
architecture specific macros of the target project are used to correctly
follow conditional statements. If no BUILDENV is set, the script will
execute %prep stage for the current system. If BUILDENV is set, BUILDENVHOME
needs to be set as well. This is the directory where the changeroot
environment exists.
Once all patches have been applied, it creates a git repo in 'src/'
and set up a .gitignore.

rpm-git [-f <fuzz>] [-t] [specfile]

Options:
   -f <fuzz>: specify maximum fuzz level. default: 0.
   -t: test mode, will not create a src/ directory.
   -a <arch>: specify architecture if not the same as host.

'-f': Set a allowed fuzz level. This is useful for older versions of some
      packages where a certain amount of fuzz was still allowed.
'-t': Test mode: don't create a 'src/' directory and git repo. Useful
      to test if all patches apply.
'-a': specify an architecture in case it cannot be derived from BUILDENV.
A specfile needs to be specified only if the current directory contains
more than one.

TODO: Also catch rpm macros set in the projconf in the current directory
is an OBS package directory.

setup-bev.sh
------------
Set up a build changeroot. Given a list of 'BuildRequires: ' in a file
<PRODUCT>.desc, the script set up a fully installed build chroot
with all the BuildRequires and their dependencies installed.
This chroot is meant to be used with the localbuild.sh and my-rpmbuild
scripts below.
The 'BuildRequires: ' lines have the same format as in a spec-file
and can be taken straight from a spec file.
The changeroot can be used to build software for the system installed
in the chroot, instead of the host system. With binfmt and kvm this
even works for other architectures.
This script requires the BUILDENVHOME environment variable to be set.
It specifies where the chroot directory is to be created.

setup_bev.sh [-a <arch>] [-r <repository>] [-d <directory>] <PRODUCT> [POST]
Options:
        -a <arch>: select architecture: i586, x86_64
        -r <repository>: set repository, default: standard
        -d <directory>: use alternate directory for build env
        <PRODUCT>: product name: openSUSE-13.2, SLE-12-SP1, etc.
        POST: For SLE - if not to be included in the product name
              - GA Update Update:Test (default: GA)

'-a <arch>': specify the architecture for which to create the environment.
'-r <repository>': set name of the binary repository
'-d <directory>': overrides BUILDENVHOME
<PRODUCT>: the product name in OBS.
POST: Used for SLE - specifies the version (ie. GA, Update, Update:Test)
      if this isn't to be sepcified with the product.

This script will also set up a home and an entry to the /etc/passwd file
for the current user (the one set in $USER) so that a login into the
chroot is possible.
If the environment variable $SPACEDIR is set it will place the package
cache for the packages to install in $SPACEDIR/osbuild-packagecache.
Furthermore it will create $SPACEDIR in the chroot.
